# -*- coding: utf-8 -*-
"""ANN CODE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XMgZU7Ei-TaJkyDoAmljWSCiAiiOMhsq
"""

## Business case:-On the basis of given parameters(features) our
#target is to find
## whether a patient will have B type or M type cancer.(Benign (B) or Malignant (M) cancer)
## So we are solving a classifcation task.

## importing the libraries
import warnings
warnings.filterwarnings('ignore')
import pandas as pd

data = pd.read_csv('breast_cancer.csv')
print(data.shape)
data.head()

## basic checks
## head,tail,describe,info,missing value(is null),check if any categorical data
## unique,value_counts.
## Plotting and getting insights from data(univariate analysis,bivariate
## and multivariate analysis)(matplotlib and seaborn)
## Feature selection:-Heatmap

data.drop(columns=['id','Unnamed: 32'],axis=1,inplace=True)

data.head()

data.diagnosis.value_counts()

data.diagnosis=data.diagnosis.map({'B':0,'M':1})

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

correlation_matrix = data.corr()

 #Plot the Heatmap
plt.figure(figsize=(25, 25))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title('Correlation Heatmap for Breast Cancer Dataset')
plt.show()

data.head()

## creating independent and dependent variables
X = data.iloc[:,1:]
y = data.diagnosis

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)
X = pd.DataFrame(X_scaled,columns=X.columns) ##converting the arrays into dataframe

##creating training and test data
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,
                                test_size=0.2,random_state=42)

from sklearn.neural_network import MLPClassifier

# Model object creation with correct parameter name
model = MLPClassifier(hidden_layer_sizes=(50, 3), activation='relu', max_iter=30, random_state=1)

# Train the model
model.fit(X_train, y_train)

# Predict probabilities
y_predict_proba = model.predict_proba(X_test)

# Predict class labels
y_predict = model.predict(X_test)

y_predict_proba

y_predict

## Evaluating the model created
from sklearn.metrics import accuracy_score,classification_report
print(" accuracy :",accuracy_score(y_test,y_predict))

print(classification_report(y_test,y_predict))

